# Generated by Django 3.2.19 on 2023-05-28 23:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import judge.models.course


class Migration(migrations.Migration):

    dependencies = [
        ('judge', '0147_testpost'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Course id must be ^[a-z0-9]+$')], verbose_name='course id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='course name')),
                ('tester_see_scoreboard', models.BooleanField(default=False, help_text='If testers can see the scoreboard.', verbose_name='testers see scoreboard')),
                ('tester_see_submissions', models.BooleanField(default=False, help_text='If testers can see in-contest submissions.', verbose_name='testers see submissions')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(db_index=True, verbose_name='end time')),
                ('time_limit', models.DurationField(blank=True, null=True, verbose_name='time limit')),
                ('is_visible', models.BooleanField(default=False, help_text='Should be set even for organization-private courses, where it determines whether the course is visible to members of the specified organizations.', verbose_name='publicly visible')),
                ('scoreboard_visibility', models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation'), ('H', 'Hidden permanently')], default='V', help_text='Scoreboard visibility through the duration of the course.', max_length=1, verbose_name='scoreboard visibility')),
                ('use_clarifications', models.BooleanField(default=True, help_text='Use clarification system instead of comments.', verbose_name='no comments')),
                ('is_private', models.BooleanField(default=False, verbose_name='private to specific users')),
                ('hide_problem_tags', models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags')),
                ('hide_problem_authors', models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors')),
                ('run_pretests_only', models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only')),
                ('show_short_display', models.BooleanField(default=False, help_text='Whether to show a section containing course settings on the contest page or not.', verbose_name='show short form settings display')),
                ('is_organization_private', models.BooleanField(default=False, verbose_name='private to organizations')),
                ('limit_join_organizations', models.BooleanField(default=False, verbose_name='limit organizations that can join')),
                ('og_image', models.CharField(blank=True, default='', max_length=150, verbose_name='OpenGraph image')),
                ('logo_override_image', models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the course.', max_length=150, verbose_name='logo override image')),
                ('user_count', models.IntegerField(default=0, verbose_name='the amount of live participants')),
                ('summary', models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='course summary')),
                ('access_code', models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code')),
                ('format_name', models.CharField(choices=[('atcoder', 'AtCoder'), ('default', 'Default'), ('ecoo', 'ECOO'), ('icpc', 'ICPC'), ('ioi', 'IOI (pre-2016)'), ('ioi16', 'IOI')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format')),
                ('format_config', jsonfield.fields.JSONField(blank=True, help_text='A JSON object to serve as the configuration for the chosen contest format module. Leave empty to use None. Exact format depends on the contest format selected.', null=True, verbose_name='contest format configuration')),
                ('problem_label_script', models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script')),
                ('locked_after', models.DateTimeField(blank=True, help_text='Prevent submissions from this contest from being rejudged after this date.', null=True, verbose_name='contest lock')),
                ('points_precision', models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points')),
                ('authors', models.ManyToManyField(help_text='These users will be able to edit the course.', related_name='authored_courses', to='judge.Profile', verbose_name='authors')),
                ('banned_users', models.ManyToManyField(blank=True, help_text='Bans the selected users from joining this course.', to='judge.Profile', verbose_name='personae non gratae')),
                ('classes', models.ManyToManyField(blank=True, help_text='If organization private, only these classes may see the course.', to='judge.Class', verbose_name='classes')),
                ('curators', models.ManyToManyField(blank=True, help_text='These users will be able to edit the course, but will not be listed as authors.', related_name='curated_courses', to='judge.Profile', verbose_name='curators')),
                ('join_organizations', models.ManyToManyField(blank=True, help_text='If non-empty, only these organizations may join the course.', related_name='join_only_courses', to='judge.Organization', verbose_name='join organizations')),
                ('organizations', models.ManyToManyField(blank=True, help_text='If non-empty, only these organizations may see the course.', to='judge.Organization', verbose_name='organizations')),
                ('private_members', models.ManyToManyField(blank=True, help_text='If non-empty, only these users may see the course.', related_name='_judge_course_private_members_+', to='judge.Profile', verbose_name='private members')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contests'), ('clone_contest', 'Clone contest'), ('moss_contest', 'MOSS contest'), ('contest_rating', 'Rate contests'), ('contest_access_code', 'Contest access codes'), ('create_private_contest', 'Create private contests'), ('change_contest_visibility', 'Change contest visibility'), ('contest_problem_label', 'Edit contest problem label script'), ('lock_contest', 'Change lock status of contest')),
            },
        ),
        migrations.CreateModel(
            name='CourseParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_start', models.DateTimeField(db_column='start', default=django.utils.timezone.now, verbose_name='start time')),
                ('score', models.FloatField(db_index=True, default=0, verbose_name='score')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('is_disqualified', models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified')),
                ('tiebreaker', models.FloatField(default=0.0, verbose_name='tie-breaking field')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id')),
                ('format_data', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='contest format specific data')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='judge.course', verbose_name='associated course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_history', to='judge.profile', verbose_name='user')),
            ],
            options={
                'verbose_name': 'course participation',
                'verbose_name_plural': 'course participations',
                'unique_together': {('course', 'user', 'virtual')},
            },
        ),
        migrations.CreateModel(
            name='CourseProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[judge.models.course.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")], verbose_name='max submissions')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_problems', to='judge.course', verbose_name='course')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='judge.problem', verbose_name='problem')),
            ],
            options={
                'verbose_name': 'course problem',
                'verbose_name_plural': 'course problems',
                'ordering': ('order',),
                'unique_together': {('problem', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-z-]+$', message='Lowercase letters and hyphens only.')], verbose_name='tag name')),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('^#(?:[A-Fa-f0-9]{3}){1,2}$', 'Invalid colour.')], verbose_name='tag colour')),
                ('description', models.TextField(blank=True, verbose_name='tag description')),
            ],
            options={
                'verbose_name': 'course tag',
                'verbose_name_plural': 'course tags',
            },
        ),
        migrations.CreateModel(
            name='CourseTheory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_theorys', to='judge.course', verbose_name='course')),
                ('theory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='judge.theorypost', verbose_name='theory')),
            ],
            options={
                'verbose_name': 'course theory',
                'verbose_name_plural': 'course theorys',
                'ordering': ('order',),
                'unique_together': {('theory', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_tests', to='judge.course', verbose_name='course')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='judge.testpost', verbose_name='test')),
            ],
            options={
                'verbose_name': 'course test',
                'verbose_name_plural': 'course tests',
                'ordering': ('order',),
                'unique_together': {('test', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(default=0.0, verbose_name='points')),
                ('is_pretest', models.BooleanField(default=False, help_text='Whether this submission was ran only on pretests.', verbose_name='is pretested')),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='judge.courseparticipation', verbose_name='participation')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='judge.courseproblem', verbose_name='problem')),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='course', to='judge.submission', verbose_name='submission')),
            ],
            options={
                'verbose_name': 'course submission',
                'verbose_name_plural': 'course submissions',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='problems',
            field=models.ManyToManyField(through='judge.CourseProblem', to='judge.Problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='course',
            name='spectators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to spectate the contest, but not see the problems ahead of time.', related_name='spectated_courses', to='judge.Profile', verbose_name='spectators'),
        ),
        migrations.AddField(
            model_name='course',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='courses', to='judge.CourseTag', verbose_name='course tags'),
        ),
        migrations.AddField(
            model_name='course',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the course, but not edit it.', related_name='tested_courses', to='judge.Profile', verbose_name='testers'),
        ),
        migrations.AddField(
            model_name='course',
            name='tests',
            field=models.ManyToManyField(through='judge.CourseTest', to='judge.TestPost', verbose_name='tests'),
        ),
        migrations.AddField(
            model_name='course',
            name='theory',
            field=models.ManyToManyField(through='judge.CourseTheory', to='judge.TheoryPost', verbose_name='theory'),
        ),
        migrations.AddField(
            model_name='course',
            name='view_course_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_course_scoreboard', to='judge.Profile', verbose_name='view course scoreboard'),
        ),
        migrations.AddField(
            model_name='course',
            name='view_course_submissions',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to see in-contest submissions.', related_name='view_course_submissions', to='judge.Profile', verbose_name='can see course submissions'),
        ),
        migrations.AddField(
            model_name='profile',
            name='current_course',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='judge.courseparticipation', verbose_name='current course'),
        ),
        migrations.AddField(
            model_name='submission',
            name='course_object',
            field=models.ForeignKey(blank=True, db_index=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='judge.course', verbose_name='course'),
        ),
    ]
